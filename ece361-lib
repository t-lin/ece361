#!/bin/bash
# The shebang above is really just for vim to know this is a bash script
# This script library is meant to be sourced by others
source /usr/local/ece361-wrapper-prints

# Find available UG EECG host to SSH into.
#   - Checks if entry exist in DNS
#   - If entry exists, see if port 22 is up
#
# Sets 'EECG_HOST' environment variable to the candidate host
#
# Hoping this function "future-proofs" the process since EECG may
# change the station names at any time or shut some down.
function findAvailEECGHost() {
    bold_blue "Finding available UG EECG host..."

    # Count backwards from 254 since, at the time of script creation, more
    # we know that more hosts are in the ug200+ range.
    for i in `seq 254 -1 1`; do
        EECG_HOST=ug${i}.eecg.utoronto.ca
        EECG_HOST_IP=`dig ${EECG_HOST} +short`
        if [[ -n ${EECG_HOST_IP} ]]; then
            # Using 'nc' here to test since most systems have it
            nc -z -w1 ${EECG_HOST_IP} 22
            if [[ $? -eq 0 ]]; then
                return
            fi
        fi
    done

    bold_red "ERROR: Unable to find available EECG host to connect to"
    return 255
}

KEY_CONSENT_FILE=~/.ece361-key-login
KEY_FILE=~/.ssh/ece361-id_rsa

# Opens an SSH session to EECG and stores the control master in a temp directory
# If the user did not consent to using a key, prompt them for their UTORid
function sshEECGOpenSess() {
    findAvailEECGHost
    if [[ $? -ne 0 ]]; then
        return $?
    fi

    CTRL_PATH=`mktemp -d`
    SSHFLAGS+=" -o ControlPath=${CTRL_PATH}/%r@%h:%p -o ControlMaster=auto -o ControlPersist=3m"
    SSHFLAGS+=" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

    if [[ -f ${KEY_CONSENT_FILE} ]]; then
        UTORID=`cat ${KEY_CONSENT_FILE}`
        SSHFLAGS+=" -i ${KEY_FILE}"
    else
        blue -n "Enter your UG EECG username: "; read UTORID
    fi

    # Open SSH session; use a dummy command to avoid going into a remote shell
    ssh ${SSHFLAGS} ${UTORID}@${EECG_HOST} "exit"
}

function sshEECGRunCmd() {
    ssh ${SSHFLAGS} ${UTORID}@${EECG_HOST} $@
}

# Clean-up SSH control master
function sshEECGCloseSess() {
    rm -rf ${CTRL_PATH}
}

