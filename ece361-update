#!/bin/bash
# Thomas Lin (2016 - 2020):
#   Update script for the ECE361 VM image

# Define these print wrappers here instead of sourcing ece361-wrapper-prints
# We don't know if it exists in the system, or if it does, if it's old
function green() {
    if [ "$1" = "-n" ]; then
        STRING=$2
        FLAGS=-ne
    else
        STRING=$1
        FLAGS=-e
    fi
    echo $FLAGS "\e[1;32;40m${STRING}\e[0m"
}

function blue() {
    if [ "$1" = "-n" ]; then
        STRING=$2
        FLAGS=-ne
    else
        STRING=$1
        FLAGS=-e
    fi
    echo $FLAGS "\e[1;34;40m${STRING}\e[0m"
}

function yellow() {
    if [ "$1" = "-n" ]; then
        STRING=$2
        FLAGS=-ne
    else
        STRING=$1
        FLAGS=-e
    fi
    echo $FLAGS "\e[1;33;40m${STRING}\e[0m"
}

# Clones the ece361-vm repo and checks if the update script is itself updated
# Re-executes update script if it is newer, else returns path to the repo
function update_update() {
    TMPDIR=`mktemp -d`
    cd ${TMPDIR} && git clone -q https://github.com/t-lin/ece361-vm.git && cd ${TMPDIR}/ece361-vm

    SCRIPT_DIR=/usr/local/bin
    UPDATE_SCRIPT=ece361-update
    if [[ -f ${SCRIPT_DIR}/${UPDATE_SCRIPT} ]]; then
        DIFF=`diff ${SCRIPT_DIR}/${UPDATE_SCRIPT} ${UPDATE_SCRIPT}`
        if [[ -n ${DIFF} ]]; then
            # Save backup of current script and update the current script
            TIMESTAMP=`date +%s`
            blue "Update script has changed"
            blue "Saving backup of current script to ${SCRIPT_DIR}/.${UPDATE_SCRIPT}.${TIMESTAMP}"
            sudo mv ${SCRIPT_DIR}/${UPDATE_SCRIPT} ${SCRIPT_DIR}/.${UPDATE_SCRIPT}.${TIMESTAMP}
        fi
    fi

    # Have this case separate (i.e. not 'else' of previous), in case script was moved due to diff
    if [[ ! -f ${SCRIPT_DIR}/${UPDATE_SCRIPT} ]]; then
        # Copy script and execute it after 3 seconds and exit
        blue "Installing new update script..."
        sudo cp ${UPDATE_SCRIPT} ${SCRIPT_DIR}/${UPDATE_SCRIPT}
        sudo chmod +x ${SCRIPT_DIR}/${UPDATE_SCRIPT}
        blue "Successfully installed ${UPDATE_SCRIPT}"
        for i in `seq 3 -1 1`; do
            blue -n "\rExiting and executing new script in ${i} seconds..."
            sleep 1
        done
        ${SCRIPT_DIR}/${UPDATE_SCRIPT} `pwd` &
        exit 0
    fi

    TMPDIR=`pwd`
}

function update_ryu() {
    cd /home/ubuntu/ryu
    blue "Updating Ryu..." && sudo git pull -f origin of_lab
    if [[ $? -gt 0 ]]; then
        yellow "Error while updating Ryu, please check error message"
    else
        green "Successfully updated Ryu"
    fi

    echo
    cd /usr/lib/python2.7/ryu_ofctl
    blue "Updating ryu_ofctl..." && sudo git pull -f origin master
    if [[ $? -gt 0 ]]; then
        yellow "Error while updating ryu_ofctl, please check error message"
    else
        green "Successfully updated ryu_ofctl"
    fi
}

# Package installations and any other configuration modifications
function update_vm() {
    echo && blue "Updating packages..."
    sudo apt-get update

    # Package installations
    sudo apt-get install -y python-dpkt vnc4server sshfs lxsession-logout
    sudo pip install -U gevent==1.4.0

    # Configurations
    echo && blue "Checking configurations..."

    # Set VNC password to 'ece361' and configure for LXDE
    vncpasswd << EOF
ece361
ece361
EOF
}

# Functions almost like a 'cp' command with source and destination
# If the destination file exists, and is different than the source file, then
# a hidden timestamped backup is made before changing
function install_file() {
    TIMESTAMP=`date +%s`
    SRC_FILE=$1
    if [[ ! -f ${SRC_FILE} ]]; then
        yellow "Error in install_file(), ${SRC_FILE} does not exist"
        return 255
    fi

    DST_FILE=$2
    if [[ -f ${DST_FILE} ]]; then
        diff ${SRC_FILE} ${DST_FILE} > /dev/null 2>&1
        if [[ $? -ne 0 ]]; then
            # Source and destination files differ
            # Make hidden timestmaped backup before changing it
            DST_FILE_BASENAME=`basename ${DST_FILE}`
            DST_FILE_DIRNAME=`dirname ${DST_FILE}`
            sudo mv ${DST_FILE} ${DST_FILE_DIRNAME}/.${DST_FILE_BASENAME}.${TIMESTAMP}
        else
            # Do nothing
            return 0
        fi
    fi

    sudo cp ${SRC_FILE} ${DST_FILE}
}

# Expects to be called with a single input parameter, the directory where the ece361-vm repo is
function update_misc() {
    cd $1

    TIMESTAMP=`date +%s`
    SCRIPT_DIR=/usr/local/bin

    # Install wrappers for echoing/printing
    install_file ece361-wrapper-prints /usr/local/ece361-wrapper-prints

    # Install lib file for scripts
    install_file ece361-lib /usr/local/ece361-lib

    # Install the init script
    install_file ece361-init ${SCRIPT_DIR}/ece361-init

    # Install start / stop scripts for Ryu controller
    install_file sdn/ece361-start-controller ${SCRIPT_DIR}/ece361-start-controller
    install_file sdn/ece361-stop-controller ${SCRIPT_DIR}/ece361-stop-controller

    # Create clean-up script
    install_file ece361-cleanup ${SCRIPT_DIR}/ece361-cleanup

    # Create VNC xstartup scripts
    # User may modify the xstartup to customize it, so avoid overwriting it if it exists
    VNC_STARTUP_SCRIPT=/home/ubuntu/.vnc/xstartup
    if [[ ! -f ${VNC_STARTUP_SCRIPT} ]]; then
        install_file vnc/xstartup ${VNC_STARTUP_SCRIPT}
        sudo chmod +x ${VNC_STARTUP_SCRIPT}
    fi
    install_file vnc/ece361-vnc ${SCRIPT_DIR}/ece361-vnc

    # Installs or updates remote exercise script
    install_file remote-exercise ${SCRIPT_DIR}/ece361-exercise

    # Installs or updates remote version of EECG's submission scripts
    install_file remote-submit ${SCRIPT_DIR}/remote-submit
    sudo rm -f ${SCRIPT_DIR}/submitece361* # Just in case...
    sudo ln -s ${SCRIPT_DIR}/remote-submit ${SCRIPT_DIR}/submitece361f
    sudo ln -s ${SCRIPT_DIR}/remote-submit ${SCRIPT_DIR}/submitece361s

    # Installs or updates remote submission script (runs exercise + submit)
    install_file remote-exercise-submit ${SCRIPT_DIR}/ece361-submit

    # Installs or updates the lab init script
    install_file ece361-lab-init ${SCRIPT_DIR}/ece361-lab-init

    # Update Geany's editor:
    #   - Set font to Sans (underscore does not show in Monospace)
    #   - Use spaces by default (instead of tabs)
    sed -i 's/editor_font=Monospace/editor_font=Sans/g' /home/ubuntu/.config/geany/geany.conf
    sed -i 's/indent_type=1/indent_type=0/g' /home/ubuntu/.config/geany/geany.conf
}

function check_modules_reinstall() {
    OPENVSWITCH_MODULE=`sudo lsmod | grep -i openvswitch`
    if [[ ! -n ${OPENVSWITCH_MODULE} ]]; then
        # This VM should have OVS installed and 'openvswitch' module loaded
        # There's an odd case where installing VBox extensions prevent it from loading
        # Work-around / fix is to re-install linux modules and rebuild the initramfs
        sudo apt-get --reinstall install linux-modules-`uname -r`
        sudo update-initramfs -u
        green "You need to reboot your VM after the update finishes by running: sudo reboot now"
    fi
}

update_all() {
    # Check if update script itself needs updating
    [[ $# -eq 0 ]] && update_update
    echo
    update_ryu
    echo
    update_vm
    echo
    update_misc ${TMPDIR}
    echo
    check_modules_reinstall
    echo
    green "Finished updating (press any key to finish)"
}

# If this script is re-executed by previous update attempt, it will pass in the old directory
TMPDIR=$1 # Global scope, where the Git repo w/ relevant VM files are temporarily stored
if [[ $# -eq 1 && ! -d ${TMPDIR} ]]; then
    yellow "Error: ${TMPDIR} is not a directory, aborting..."
    exit 255
fi

# Ensures whoever runs this has sudo access
if [[ `sudo -n echo ok` != "ok" ]]; then
    yellow "This script can only be run by a user with sudo access without prompt"
    echo && yellow "Aborting update"
    exit 255
fi

# Check internet connectivity first
if [[ `ping -q -w 1 -c 1 8.8.8.8 > /dev/null && echo 'ok'` = 'ok' ]]; then
    # Pass any params given to this script to update_all
    update_all $@
else
    # Check using 8.8.4.4
    if [[ `ping -q -w 1 -c 1 8.8.4.4 > /dev/null && echo 'ok'` = 'ok' ]]; then
        # Pass any params given to this script to update_all
        update_all $@
    else
        # Assuming it's a DHCP issue, try pinging gateway
        GATEWAY=`ip route | grep default | cut -d ' ' -f 3`

        if [[ `ping -q -w 1 -c 1 ${GATEWAY} > /dev/null && echo 'ok'` = 'ok' ]]; then
            # Gateway seems fine, but not internet... nothing we can do here
            yellow "Cannot access the Internet, check your connectivity"
        else
            # Assuming it's a DHCP issue, try to re-acquire IP address
            yellow "Cannot contact gateway. Trying to reset eth0..."
            ifdown eth0
            sleep 1
            ifup eth0

            yellow "Check your internet connectivity, and re-run this script once verified"
        fi
    fi
fi

